#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <omp.h>
using namespace std;

class Graph {
    int V;
    vector<vector<int>> adj;

public:
    Graph(int V) : V(V) {
        adj.resize(V);
    }

    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u); // Undirected graph
    }

    void ParallelBFS(int Start) {
        vector<bool> Visited(V, false);
        queue<int> q;

        Visited[Start] = true;
        q.push(Start);

        while (!q.empty()) {
            int size = q.size();
            vector<int> currentLevel;

            // Extract all nodes at current level
            for (int i = 0; i < size; ++i) {
                int u = q.front();
                q.pop();
                currentLevel.push_back(u);
            }

            vector<int> nextLevel;

            // Process each node in parallel
            #pragma omp parallel for
            for (int i = 0; i < currentLevel.size(); ++i) {
                int u = currentLevel[i];
                cout << u << " ";

                for (int v : adj[u]) {
                    #pragma omp critical
                    {
                        if (!Visited[v]) {
                            Visited[v] = true;
                            nextLevel.push_back(v);
                        }
                    }
                }
            }

            // Add next level to queue
            for (int v : nextLevel) {
                q.push(v);
            }
        }
        cout << endl;
    }

    void ParallelDFS(int Start) {
        vector<bool> Visited(V, false);
        stack<int> stk;
        stk.push(Start);

        while (!stk.empty()) {
            int u;

            #pragma omp critical
            {
                u = stk.top();
                stk.pop();
            }

            #pragma omp critical
            {
                if (!Visited[u]) {
                    Visited[u] = true;
                    cout << u << " ";
                }
            }

            #pragma omp parallel for
            for (int i = 0; i < adj[u].size(); ++i) {
                int v = adj[u][i];
                #pragma omp critical
                {
                    if (!Visited[v]) {
                        stk.push(v);
                    }
                }
            }
        }
        cout << endl;
    }
};

int main() {
    int V, E, u, v;
    cout << "No. of Vertices: ";
    cin >> V;
    cout << "No. of Edges: ";
    cin >> E;

    Graph g(V);

    for (int i = 0; i < E; i++) {
        cout << "Add Edge " << i + 1 << ": ";
        cin >> u >> v;
        g.addEdge(u, v);
    }

    int start;
    cout << "Enter start vertex for BFS and DFS: ";
    cin >> start;

    cout << "Parallel BFS: ";
    g.ParallelBFS(start);

    cout << "Parallel DFS (Stack-based): ";
    g.ParallelDFS(start);

    return 0;
}